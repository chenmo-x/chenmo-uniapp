import { Ping, PingOptions, PingResult, PingSync } from "../interface";
import { PingFailImpl, getErrcode, UniErrorSubject } from '../unierror';
import { UTSAndroid } from "io.dcloud.uts";
import InetAddress from "java.net.InetAddress";
/**
 * @description 判断是否是ip或者主机
 * @param {Object} str 
 */
function isIpOrHostname(str : string) : boolean {
	const ipv4Pattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	const ipv6Pattern = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}(([0-9]{1,3}\.){3,3}[0-9]{1,3})|([0-9a-fA-F]{1,4}:){1,4}:(([0-9]{1,3}\.){3,3}[0-9]{1,3}))$/;
	const hostnamePattern = /^(?=.{1,253}$)((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.?)+[A-Za-z]{2,6}$/;
	return ipv4Pattern.test(str) || ipv6Pattern.test(str) || hostnamePattern.test(str);
}
/**
 * 异步ping
 */
export const ping : Ping = function (options : PingOptions) {
	try {
		const context = UTSAndroid.getAppContext();
		if (context != null) {
			const addr = options.addr
			if (!isIpOrHostname(addr)) {
				let err = new PingFailImpl(getErrcode(13000));
				options.fail?.(err)
				options.complete?.(err)
				return
			}
			const time = options.time
			// 获取 InetAddress 实例
			const inetAddress : InetAddress = InetAddress.getByName(addr);
			// 记录发送请求的时间
			const startTime = System.currentTimeMillis();
			// 执行 Ping
			if (inetAddress.isReachable(time.toInt())) { // 设置超时时间为 默认为5 秒
				// 计算 ping 时间
				const endTime = System.currentTimeMillis();
				let res = new PingResult(0, UniErrorSubject, "ping:ok", 0)
				res.time = endTime - startTime;
				options.success?.(res)
				options.complete?.(res)
			} else {
				let err = new PingFailImpl(getErrcode(13002));
				options.fail?.(err)
				options.complete?.(err)
			}
		} else {
			let err = new PingFailImpl(getErrcode(1001));
			options.fail?.(err)
			options.complete?.(err)
		}
	} catch (e : Error) {
		console.error(e)
		let err = new PingFailImpl(getErrcode(13010));
		options.fail?.(err)
		options.complete?.(err)
	}
}
/**
 * 同步ping
 */
export const pingSync : PingSync = function (options : PingOptions) : PingResult {
	try {
		const context = UTSAndroid.getAppContext();
		if (context != null) {
			const addr = options.addr
			if (!isIpOrHostname(addr)) {
				const err = new PingFailImpl(getErrcode(13000));
				const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
				return res
			}
			const time = options.time
			// 获取 InetAddress 实例
			const inetAddress : InetAddress = InetAddress.getByName(addr);
			// 记录发送请求的时间
			const startTime = System.currentTimeMillis();
			// 执行 Ping
			if (inetAddress.isReachable(time.toInt())) { // 设置超时时间为 默认为5 秒
				// 计算 ping 时间
				const endTime = System.currentTimeMillis();
				let res = new PingResult(0, UniErrorSubject, "ping:ok", 0)
				res.time = endTime - startTime;
				return res
			} else {
				const err = new PingFailImpl(getErrcode(13002));
				const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
				return res
			}
		} else {
			const err = new PingFailImpl(getErrcode(1001));
			const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
			return res
		}
	} catch (e : Error) {
		console.error(e)
		const err = new PingFailImpl(getErrcode(13010));
		const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
		return res
	}
}